#!/bin/bash
# shellcheck shell=bash
# shellcheck disable=SC2016
# shellcheck disable=SC2154
cp /template/config/envs /config/envs.template
if [ ! -e "/config/envs" ]; then
    cp /template/config/envs /config/envs
fi

source /scripts/setup.sh
# 自动更新
if [[ "${AUTO_UPDATE}" = "true" ]];then
  pretty_echo IN "自动更新已开启..."
  cd /embyExternalUrl && git pull
  # 如果指定了commit id，那么使用对应的代码
  if test -n "$SOURCE_COMMIT_ID"; then
    git checkout $SOURCE_COMMIT_ID
    pretty_echo OK "源码被切换到commit: $SOURCE_COMMIT_ID."
  fi
  pretty_echo IN "更新完成！"
else
    # 如果不开启自动更新，但是更新了镜像，镜像中的/template/config/envs是最新版，/config/envs是旧版的
    # 更新/config/envs中的SOURCE_COMMIT_ID
    TEMPLATE_COMMIT_ID=$(cat /template/config/envs |grep SOURCE_COMMIT_ID |awk -F '=' '{print $2}')
    CUR_COMMIT_ID=$(cat /config/envs |grep SOURCE_COMMIT_ID |awk -F '=' '{print $2}')
    if [[ "$TEMPLATE_COMMIT_ID" != "$CUR_COMMIT_ID" ]];then
        sed -i 's#^SOURCE_COMMIT_ID.*#SOURCE_COMMIT_ID='"${TEMPLATE_COMMIT_ID}"'#g' /config/envs
    fi

fi

# 软链接ngx_http_js_module.so
if [ ! -e "/etc/nginx/modules/ngx_http_js_module.so" ]; then
  ln -s /usr/lib/nginx/modules/ngx_http_js_module.so /etc/nginx/modules/ngx_http_js_module.so
fi

pretty_echo IN "正在${SERVER} media server上启动${SERVER}2Alist...."
# 删除原有配置文件
rm -rf /etc/nginx/conf.d /etc/nginx/nginx.conf
# 重新拷贝配置文件
eval "cp -rf /embyExternalUrl/${SERVER}2Alist/nginx/conf.d /etc/nginx/conf.d"
eval "cp -rf /embyExternalUrl/${SERVER}2Alist/nginx/nginx.conf /etc/nginx/nginx.conf"


# step1 替换constant.js中的变量
/bin/sh /scripts/constant.sh
# step2 替换constant-mount.js中的变量
/bin/sh /scripts/constant-mount.sh
# step3【可选】 替换constant-ext.js中的变量
/bin/sh /scripts/constant-ext.sh
# step4【可选】 为emby增加embyAddExternalUrl
/bin/sh /scripts/embyAddExternalUrl.sh
# step5【可选】 为emby/plex增加mediaPathMapping
/bin/sh /scripts/constant-pro.sh

# 替换http、https端口
sed -i.bak "s/8091/${NGINX_PORT}/g" "/etc/nginx/conf.d/includes/http.conf"
cmp_two_files "/etc/nginx/conf.d/includes/http.conf" "/etc/nginx/conf.d/includes/http.conf.bak" "NGINX_PORT => ${NGINX_PORT}"

# SSL开启
if [ "${SSL_ENABLE}" = "true" ]; then
  if [ -n "${NGINX_SSL_PORT}" ]; then
    sed -i.bak "s/8095/${NGINX_SSL_PORT}/g" "/etc/nginx/conf.d/includes/https.conf"
    cmp_two_files "/etc/nginx/conf.d/includes/https.conf" "/etc/nginx/conf.d/includes/https.conf.bak" "NGINX_SSL_PORT => ${NGINX_SSL_PORT}"
  fi
  sed -i.bak '/#\s*include \/etc\/nginx\/conf.d\/includes\/https\.conf;/ {
      s/^#//;
      a\include \/etc\/nginx\/conf.d\/includes\/https.conf;
      d
  }' /etc/nginx/conf.d/${SERVER}.conf
  cmp_two_files "/etc/nginx/conf.d/${SERVER}.conf" "/etc/nginx/conf.d/${SERVER}.conf.bak" ${SERVER}.conf中的https.conf导入
  pretty_echo IN "内置SSL启用中..."
  # 拷贝一份ssl脚本
  if [ ! -e "/opt/ssl.template" ]; then
    cp /template/config/ssl /opt/ssl.template
  fi

  # SSL_DOMAIN、SSL变量替换
  cd / && /bin/sh /check_certificate
  if [ $? -ne 0 ]; then
    pretty_echo ER "SSL证书校验失败，退出程序。"
    exit 1
  fi

  # 清空定时任务
  crontab -d
  # 将新的定时任务写入crontab
  echo "${SSL_CRON} cd / && /bin/sh /check_certificate" | crontab -
  # 重启cron服务使修改生效
  pkill -f crond
  /usr/sbin/crond
  pretty_echo OK "定时任务'${SSL_CRON} cd / && /bin/sh /check_certificate'已被写入."
else
    sed -i.bak '/include \/etc\/nginx\/conf.d\/includes\/https\.conf;/ {
        s/.*//;
        a\#include \/etc\/nginx\/conf.d\/includes\/https.conf;
        d
    }' /etc/nginx/conf.d/${SERVER}.conf
    cmp_two_files "/etc/nginx/conf.d/${SERVER}.conf" "/etc/nginx/conf.d/${SERVER}.conf.bak" ${SERVER}.conf中的https.conf导入
    pretty_echo WR "内置SSL已被禁用！"
fi

# 后台启动nginx
nginx -g "daemon off;" 